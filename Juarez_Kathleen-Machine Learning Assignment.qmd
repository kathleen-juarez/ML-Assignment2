---
title: "ML"
format:
  html:
    self-contained: true
    toc: true
    toc-depth: 4
   #number-sections: true
    code-line-numbers: true
    code-fold: show  
    code-tools: true
    code-link: true
    embed-resources: true
    df-print: paged
editor: visual
execute: 
  freeze: auto
  warning: false
editor_options: 
  chunk_output_type: inline
---

# 1. Install Packages

```{r}
#install.packages("AmesHousing")
#install.packages("MASS")
library(skimr)
library(dplyr)
library(ggplot2)
library(magrittr)
library(broom)
library(tidyverse)
```

# 2. Data

## 2.1 Boston Housing Data

-   `crim`: per capita crime rate by town.

-   `zn`: proportion of residential land zoned for lots over 25,000 sq.ft.

-   `indus`: proportion of non-retail business acres per town.

-   `chas`: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise).

-   `nox`: nitrogen oxides concentration (parts per 10 million).

-   `rm`: average number of rooms per dwelling.

-   `age`: proportion of owner-occupied units built prior to 1940.

-   `dis`: weighted mean of distances to five Boston employment centres.

-   `rad`: index of accessibility to radial highways.

-   `tax`: full-value property-tax rate per \$10,000.

-   `ptratio`: pupil-teacher ratio by town.

-   `black`: 1000(Bk−0.63)21000(Bk−0.63)2 where `Bk` is the proportion of blacks by town.

-   `lstat`: lower status of the population (percent).

`medv`: median value of owner-occupied homes in \$1000s.

```{r}
library(MASS)
data("Boston")

head(Boston)
```

```{r}
skim(Boston)
```

```{r}
# Can visualize few relationships
ggplot(data = Boston, aes(x=lstat, y=medv)) +
  geom_point () + 
  geom_smooth(method="loess")

 #lstat= lower status of the population (percent). medv = median value of owner-occupied homes in $1000s.
```

## 2.2 Chicago Housing Data

![](ChiHousingimage.png)

```{r}
# Chicago Housing Data
library(readr)

chicago <- read_csv("chicago housingdata.csv")

head(chicago)
```

```{r}
ggplot(chicago,aes(x=BEDROOM, y=Ln_Price)) +
  geom_point () + 
  geom_smooth(method="gam")
```

## 2.3 Heart data

Description:

-   Age

-   Sex (1= male, 0= female)

-   ChestPain (1= typical angina, 2= atypical angina, 3= non-anginal pain, 4= asymptotic) RestBP

-   Chol

-   Fbs (fasting blood sugar)

-   RestECG (0 = normal, 1 = having ST-T wave abnormally, 2= left ventricular) CHD (coronary heart disease: 1= yes, 0= no)

```{r}
library(haven)
heart <- 
  read_sav("Heart Data.sav")

View(heart)
```

# 3. Multiple Linear and Logistic Regression

## 3.1 Log-Level Model with Boston Data

```{r}
# Boston Data
library(broom)

lm(log(medv) ~ ., data=Boston) %>% 
  tidy() %>% 
  mutate(across(where(is.numeric), ~ round(., 4)))

```

::: callout-note
## Tip

Log Linear model

-   log(y) = β₀ + β₁x₁ + β₂x₂ + … + ε

    -   A **one-unit increase in `xᵢ`** is associated with an **approximately (100 × βᵢ)% change in `y`**, **holding other variables constant**.
:::

## 3.2 Log-Log Model with Chicago Data

```{r}
# Chicago Housing Data
lm(Ln_Price ~ ., data=chicago) %>% 
  tidy() %>% 
   mutate(across(where(is.numeric), ~ round(., 4)))
```

::: callout-note
## Log Log Model

Log-Log model

-   log(y) = β₀ + β₁log(x₁) + β₂x₂ + … + ε

    -   A **1 % increase in `x1`** is associated with an **approximately β1% change in `y`**, **holding other variables constant**.
:::

## 3.3 Functional Forms Summary Table

| **Model Type** | **Formula** | **Interpretation** |
|------------------------|------------------------|------------------------|
| **Log-Linear** | `log(y) ~ x` | A 1-unit increase in `x` → \~**100 × β%** change in `y` |
| **Log-Log** | `log(y) ~ log(x)` | A 1% increase in `x` → \~**β%** change in `y` (**elasticity**) |
| **Linear-Log** | `y ~ log(x)` | A 1% increase in `x` → \~**β ÷ 100** unit change in `y` |
| **Linear** | `y ~ x` | A 1-unit increase in `x` → **β** unit change in `y` |

### 3.3.1 Caveat for log-level model

log(y) = 0.5·x + …

-   In the Log-level model, it is only accurate when β is small (say \|β\| \< 0.1). For larger coefficients, the **exponential form** gives the exact percentage change.

When the coefficient (like **0.5**) is **large**, the usual shortcut for interpreting the result isn't very accurate.

#### **1. Approximate method** (only works well when β is small — like \< 0.1):

-   Rule of thumb: Multiply the coefficient by 100.\

    → So: `0.5 × 100 = 50%`\

    → **1 unit increase in x = \~50% increase in y**

#### **2. Exact method** (always accurate):

-   Use the formula: (exp(β)−1) x 100\

    → So: (exp(.5) x 100≈64.87\

    → **1 unit increase in x = \~64.9% increase in y**

If your coefficient is **small** (like 0.05), the **approximate method** (β × 100) is fine.

If your coefficient is **large** (like 0.5 or more), use the **exact method** with `exp(β) - 1`.\

```{r}
(exp(0.1) - 1) * 100
(exp(0.5) - 1) * 100
```

## 3.4 Logistic model with Heart Data

```{r}
# Running binary logistic model for heart
m3 <- 
  glm(CHD ~ ., family = binomial(link="logit"), data=heart) #CHD (coronary heart disease: 1= yes, 0= no)
tidy(m3) %>% 
   mutate(across(where(is.numeric), ~ round(., 4)))
```

::: {.callout-note collapse="true" title="code explanation"}
### code explanation

```         
glm(): This fits a generalized linear model.

CHD ~ .: You're modeling CHD (coronary heart disease) as the outcome, using all other variables in the heart dataset as predictors.

family = binomial(link = "logit"): This tells R to run a logistic regression (used when the outcome is binary: 0 or 1).

    Here, CHD = 1 means the person has heart disease.

    CHD = 0 means they don't.

Result: This model estimates how each predictor affects the log-odds of having coronary heart disease.
```
:::

```{r}
# You can calculate OR and their confidence intervals for interpretation
OR_table <- 
  cbind(OR = coef(m3), confint(m3)) %>%
  exp() %>%
  round(3)
```
